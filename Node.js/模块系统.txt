模块系统
-----------------------
Node为服务器端Javascript指定了一些规范，并实现了CommonJS模块标准。此标准中，每个模块都拥有一个上下文，将该模块和其它模块隔离开来，这意味着模块不会污染全局作用域--因为根本就没有全局作用域，并且不会给其它模块造成干扰。


Node Module System 以 CommonJS 模块系统为模式。该模块系统有三个核心的全局对象:require、module和exports。
require 			:		返回此模块对外暴露的Javascript API,根据模块不同，返回的可能是任意的Javascript值
module 				:		表示当前模块自身
module.exports 	:		模块向需要它的脚本暴露的东西，它被初始化成一个空对象
exports 			:		是对module.exports的引用

Node模块需要实现CommonJS模块系统的以下需求:
1. 支持require方法
2. 模块名是字符串，可能包含斜杠(指代路径)
3. 模块必须申明指出需要对外暴露的接口
4. 模块的变量都是私有的

模块的加载
----
核心模块:		Node中通过二进制形式提供了一些核心模块，只能用模块名称引用到它们
文件模块:		提供绝对、相对路径从文件系统中加载，可忽略.js扩展名
文件夹模块:	提供文件夹路径，Node会假定该文件夹是一个包，试图查找包定义(package.json)
					若存在包定义，将查找其中的main属性，加载指定的路径
					{
						"name" : "myModule",
						"main" : "./lib/myModule.js"
					}
					若不存在包定义，包的入口假定为默认值index.js、index.node
node_modules:	既不是核心模块，也不是相对、绝对路径，就加载这个文件夹下面的模块。
							若找不到，Node会迭代查找上级目录中的node_modules文件夹

!	模块在首次加载时会被缓存起来，这意味着多次加载会确切的返回同一模块(模块的初始化过程只执行了一次)。


模块文件扩展名
----
.js 					js文本文件
.node 				编译好的二进制文件
.json 				...

绝对和相对模块
----
Node支持简单的模块加载系统:文件和模块间具有一对一关系。相对模块就是只想一个工作目录中的Javascript文件.注意使用'./'相对路径来引用。相对模块的文件里面的代码就会在require的时候执行。

// 引用相对模块
var routes = require('./routes');


暴露API
----
要让模块暴露一个API成为require调用的返回值,就要依靠module和exports这两个全局变量。
默认情况下，每个模块都会暴露出一个空对象{}(module.exports)。而exports(注意是全局的这个)是对该对象的引用，所以如果你想要在该对象上添加属性，那么简单地在exports上添加属性即可。
如果简单地在exports上添加属性无法满足你的需求，你还可以彻底重写module.exports。

!! 因为exports是对module.exports的引用，所以绝不能对exports做赋值操作，而是给上面添加属性。你也确实没见过给exports赋值的操作。