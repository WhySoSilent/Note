定义概念
------------------
概念是优秀应用程序的源头。 而形成概念的最佳方式便是考虑应用程序所要解决的问题。好的应用程序解决的是单个明确的问题。例
如, “设置” 应用程序能让用户调整设备上的所有设置。每个任务的相关设置都会在单独界面里完成。 形成概念时,要考虑这些关键的问题:

您的用户是谁?
----
不同应用程序的内容和用户体验大不相同,这取决于您想要编写的是什么应用程序,它 可能是儿童游戏,也可能是待办事项列表应用程序,又或者是测试自己学习成果的应用程序。

应用程序的用途是什么?
----
赋予应用程序一个明确的用途十分重要。了解激发用户使用应用程序的动因是 界定用途的一个出发点。

应用程序尝试解决什么问题?
----
应用程序应该完美解决单个问题,而不是尝试解决多个截然不同的问题。 如果发现应用程序尝试解决不相关的问题,那么最好考虑编写多个应用程序。

应用程序要呈现什么内容?
----
考虑应用程序将向用户呈现的内容类型,以及用户与应用程序的互动方式, 然后设计与之相称的用户界面。


设计用户界面
------------------
形成了应用程序的概念后,接下来是设计一个良好的用户界面,这是成功的关键一步。用户需要以尽可 能简单的方式与应用程序界面进行交互。为此,您需要从用户的角度来设计界面,使其高效、简洁且直 观。


定义交互
------------------
没有逻辑的支持,用户界面的功能便会很有限。创建界面后,可以通过编写代码以响应界面中的用户操 作来定义用户与他们所看到内容的交互方式。
在考虑为界面添加行为之前,了解 iOS 应用程序是基于事件驱动编程这一点很重要。
请从事件驱动编程的角度来定义用户与界面的交互方式。因为是用户而非开发者控制着何时执行应用程 序的某部分代码。您想要确认用户可以执行哪些操作以及如何响应这些操作。


实现行为
------------------
定义了用户可以在应用程序中执行的操作后,可以编写代码来实现行为。


整合数据
------------------
实现应用程序的行为后,您需要创建数据模型来支持应用程序的界面。应用程序的数据模型定义了维护 应用程序中数据的方式。数据模型的范围既包括对象的基本词典,也包括复杂的数据库。
应用程序的数据模型应该反映该应用程序的内容和用途。虽然用户不会直接和数据交互,但界面和数据 之间应该有明显的相关性。
若要为应用程序打下良好的基石,一个好的数据模型必不可少。有了数据模型,构建可扩展的应用程 序、改进功能以及修改特性会变得易如反掌。
